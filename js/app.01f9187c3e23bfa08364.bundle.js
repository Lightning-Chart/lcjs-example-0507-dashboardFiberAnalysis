(self.webpackChunk=self.webpackChunk||[]).push([[524],{44:(e,t,a)=>{const i=a(377),s=a(613),{lightningChart:r,AxisTickStrategies:n,emptyLine:o,emptyFill:l,AreaSeriesTypes:c,ColorRGBA:m,regularColorSteps:d,PalettedFill:p,LUT:y,emptyTick:S,UIElementBuilders:h,UIOrigins:u,Themes:g}=i,{createProgressiveTraceGenerator:T}=s,D={opticalFibreDistanceStep:10,opticalFibreDistanceStart:0,opticalFibreDistanceEnd:3200,timeStep:1e3,timeStart:new Date("2021-06-17T08:54:04").getTime(),timeEnd:new Date("2021-06-17T08:54:38").getTime()},b=D.timeStart,w=new Promise((async e=>{const t=Math.ceil((D.timeEnd-D.timeStart)/D.timeStep),a=Math.ceil((D.opticalFibreDistanceEnd-D.opticalFibreDistanceStart)/D.opticalFibreDistanceStep),i=await Promise.all(new Array(t).fill(0).map(((e,t)=>T().setNumberOfPoints(a).generate().toPromise().then((e=>e.map((e=>Math.abs(100*e.y)))))))),s=new Array(a).fill(0).map(((e,t)=>({x:D.opticalFibreDistanceStart+t*D.opticalFibreDistanceStep,y:i.reduce(((e,a)=>e+a[t]),0)})));e({traceDataArray:i,areaData:s})})),x=r({resourcesBaseUrl:new URL(document.head.baseURI).origin+new URL(document.head.baseURI).pathname+"resources/"}).ChartXY({theme:g[new URLSearchParams(window.location.search).get("theme")||"darkGold"]||void 0}).setTitle("Distance Intensity Chart");x.yAxis.dispose();const F=x.addAxisY({iStack:1}).setTitle("Intensity Sum").setLength({pixels:200}).setMargins(10,0).setUserInteractions({wheel:{mode:"keep-start"},touchZoom:{mode:"keep-start"}}),k=(x.axisX.setTitle("Optical Fiber Distance (m)"),x.addAxisY({iStack:0}).setTitle("Time").setTickStrategy(n.DateTime,(e=>e.setDateOrigin(new Date(b)).setGreatTickStyle(S)))),U=x.getTheme(),A=new y({interpolate:!1,steps:[{value:0,color:m(0,0,0,0)},...d(200,600,U.examples.intensityColorPalette)]});w.then((e=>{const{traceDataArray:t,areaData:a}=e;x.setCursorFormatting(((e,t,a)=>{const s=a.find((e=>e.series===i)),n=a.find((e=>e.series===r));if(s&&n)return[[{text:`Optical fiber distance: ${Math.round(s.x)} m`,rowFillStyle:x.getTheme().cursorResultTableHeaderBackgroundFillStyle}],[s.series,"",s.axisY.formatValue(s.y)],[n.series,""],["",n.axisY.formatValue(n.y)],["Intensity","",n.intensity.toFixed(1)]]}));const i=x.addPointLineAreaSeries({dataPattern:"ProgressiveX",yAxis:F}).appendJSON(a),s={columns:t[0].length,rows:t.length,dataOrder:"rows",yAxis:k},r=x.addHeatmapGridSeries(s).setStart({x:D.opticalFibreDistanceStart,y:D.timeStart-b}).setStep({x:D.opticalFibreDistanceStep,y:D.timeStep}).setIntensityInterpolation("disabled").invalidateIntensityValues(t).setFillStyle(new p({lookUpProperty:"value",lut:A})).setWireframeStyle(o);x.setPadding({bottom:64}),x.addUIElement(h.LUTRange).setLUT(A).setLUTLength(500).setLookUpUnit("Intensity").setPosition({x:50,y:0}).setOrigin(u.CenterBottom).setAutoDispose({type:"max-width",maxWidth:.8}).setBackground((e=>e.setFillStyle(l).setStrokeStyle(o)))}))}},e=>{e.O(0,[502],(()=>e(e.s=44))),e.O()}]);